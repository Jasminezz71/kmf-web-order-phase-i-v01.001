//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZEN.SaleAndTranfer.UI.LogWs {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogMAET", Namespace="http://schemas.datacontract.org/2004/07/ZEN.ZenCommon.WcfServices.ET.LOG")]
    [System.SerializableAttribute()]
    public partial class LogMAET : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string accessTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string actionControlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int appIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string clientBrowserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string computerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ipAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime logDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string logDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string pageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string accessType {
            get {
                return this.accessTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.accessTypeField, value) != true)) {
                    this.accessTypeField = value;
                    this.RaisePropertyChanged("accessType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string actionControl {
            get {
                return this.actionControlField;
            }
            set {
                if ((object.ReferenceEquals(this.actionControlField, value) != true)) {
                    this.actionControlField = value;
                    this.RaisePropertyChanged("actionControl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int appID {
            get {
                return this.appIDField;
            }
            set {
                if ((this.appIDField.Equals(value) != true)) {
                    this.appIDField = value;
                    this.RaisePropertyChanged("appID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string clientBrowser {
            get {
                return this.clientBrowserField;
            }
            set {
                if ((object.ReferenceEquals(this.clientBrowserField, value) != true)) {
                    this.clientBrowserField = value;
                    this.RaisePropertyChanged("clientBrowser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string computerName {
            get {
                return this.computerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.computerNameField, value) != true)) {
                    this.computerNameField = value;
                    this.RaisePropertyChanged("computerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ipAddress {
            get {
                return this.ipAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.ipAddressField, value) != true)) {
                    this.ipAddressField = value;
                    this.RaisePropertyChanged("ipAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime logDate {
            get {
                return this.logDateField;
            }
            set {
                if ((this.logDateField.Equals(value) != true)) {
                    this.logDateField = value;
                    this.RaisePropertyChanged("logDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string logDesc {
            get {
                return this.logDescField;
            }
            set {
                if ((object.ReferenceEquals(this.logDescField, value) != true)) {
                    this.logDescField = value;
                    this.RaisePropertyChanged("logDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pageName {
            get {
                return this.pageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.pageNameField, value) != true)) {
                    this.pageNameField = value;
                    this.RaisePropertyChanged("pageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                if ((object.ReferenceEquals(this.remarkField, value) != true)) {
                    this.remarkField = value;
                    this.RaisePropertyChanged("remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LogWs.ILogService")]
    public interface ILogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/InsertLogLogin", ReplyAction="http://tempuri.org/ILogService/InsertLogLoginResponse")]
        void InsertLogLogin(System.DateTime logDate, int appID, string userName, string accessType, string actionControl, string pageName, string clientBrowser, string logDesc, string remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/InsertLogLogin", ReplyAction="http://tempuri.org/ILogService/InsertLogLoginResponse")]
        System.Threading.Tasks.Task InsertLogLoginAsync(System.DateTime logDate, int appID, string userName, string accessType, string actionControl, string pageName, string clientBrowser, string logDesc, string remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/InsertLog", ReplyAction="http://tempuri.org/ILogService/InsertLogResponse")]
        void InsertLog(ZEN.SaleAndTranfer.UI.LogWs.LogMAET logMAET);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/InsertLog", ReplyAction="http://tempuri.org/ILogService/InsertLogResponse")]
        System.Threading.Tasks.Task InsertLogAsync(ZEN.SaleAndTranfer.UI.LogWs.LogMAET logMAET);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogServiceChannel : ZEN.SaleAndTranfer.UI.LogWs.ILogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogServiceClient : System.ServiceModel.ClientBase<ZEN.SaleAndTranfer.UI.LogWs.ILogService>, ZEN.SaleAndTranfer.UI.LogWs.ILogService {
        
        public LogServiceClient() {
        }
        
        public LogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertLogLogin(System.DateTime logDate, int appID, string userName, string accessType, string actionControl, string pageName, string clientBrowser, string logDesc, string remark) {
            base.Channel.InsertLogLogin(logDate, appID, userName, accessType, actionControl, pageName, clientBrowser, logDesc, remark);
        }
        
        public System.Threading.Tasks.Task InsertLogLoginAsync(System.DateTime logDate, int appID, string userName, string accessType, string actionControl, string pageName, string clientBrowser, string logDesc, string remark) {
            return base.Channel.InsertLogLoginAsync(logDate, appID, userName, accessType, actionControl, pageName, clientBrowser, logDesc, remark);
        }
        
        public void InsertLog(ZEN.SaleAndTranfer.UI.LogWs.LogMAET logMAET) {
            base.Channel.InsertLog(logMAET);
        }
        
        public System.Threading.Tasks.Task InsertLogAsync(ZEN.SaleAndTranfer.UI.LogWs.LogMAET logMAET) {
            return base.Channel.InsertLogAsync(logMAET);
        }
    }
}
